# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: sensor_data.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='sensor_data.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\x11sensor_data.proto\">\n\x08Quantity\x12\r\n\x05value\x18\x01 \x01(\x02\x12\x13\n\x04unit\x18\x02 \x01(\x0e\x32\x05.Unit\x12\x0e\n\x06vector\x18\x03 \x01(\x02\"c\n\x0bMeasurement\x12\x0e\n\x06sensor\x18\x01 \x01(\t\x12\x19\n\x04type\x18\x02 \x01(\x0e\x32\x0b.SensorType\x12\x1b\n\x08quantity\x18\x03 \x01(\x0b\x32\t.Quantity\x12\x0c\n\x04time\x18\x04 \x01(\x03\"]\n\x0eSensorResponse\x12\x0f\n\x07success\x18\x01 \x01(\x08\x12\r\n\x05\x65rror\x18\x02 \x01(\t\x12\x0f\n\x07message\x18\x03 \x01(\t\x12\x1a\n\x04\x64\x61ta\x18\x04 \x03(\x0b\x32\x0c.Measurement*j\n\nSensorType\x12\x0f\n\x0b\x44UMMYSENSOR\x10\x00\x12\x0f\n\x0bTEMPERATURE\x10\x01\x12\x0c\n\x08PRESSURE\x10\x02\x12\x0c\n\x08HUMIDITY\x10\x03\x12\x07\n\x03\x43O2\x10\x04\x12\x07\n\x03VOC\x10\x05\x12\x0c\n\x08\x41LTITUDE\x10\x06*M\n\x04Unit\x12\r\n\tDUMMYUNIT\x10\x00\x12\x0b\n\x07\x43\x45LCIUS\x10\x01\x12\x07\n\x03HPA\x10\x02\x12\x07\n\x03MPS\x10\x03\x12\n\n\x06METERS\x10\x04\x12\x0b\n\x07PERCENT\x10\x05\x62\x06proto3')
)

_SENSORTYPE = _descriptor.EnumDescriptor(
  name='SensorType',
  full_name='SensorType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='DUMMYSENSOR', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TEMPERATURE', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PRESSURE', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HUMIDITY', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CO2', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VOC', index=5, number=5,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ALTITUDE', index=6, number=6,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=281,
  serialized_end=387,
)
_sym_db.RegisterEnumDescriptor(_SENSORTYPE)

SensorType = enum_type_wrapper.EnumTypeWrapper(_SENSORTYPE)
_UNIT = _descriptor.EnumDescriptor(
  name='Unit',
  full_name='Unit',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='DUMMYUNIT', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CELCIUS', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HPA', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='MPS', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='METERS', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PERCENT', index=5, number=5,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=389,
  serialized_end=466,
)
_sym_db.RegisterEnumDescriptor(_UNIT)

Unit = enum_type_wrapper.EnumTypeWrapper(_UNIT)
DUMMYSENSOR = 0
TEMPERATURE = 1
PRESSURE = 2
HUMIDITY = 3
CO2 = 4
VOC = 5
ALTITUDE = 6
DUMMYUNIT = 0
CELCIUS = 1
HPA = 2
MPS = 3
METERS = 4
PERCENT = 5



_QUANTITY = _descriptor.Descriptor(
  name='Quantity',
  full_name='Quantity',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='value', full_name='Quantity.value', index=0,
      number=1, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='unit', full_name='Quantity.unit', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='vector', full_name='Quantity.vector', index=2,
      number=3, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=21,
  serialized_end=83,
)


_MEASUREMENT = _descriptor.Descriptor(
  name='Measurement',
  full_name='Measurement',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='sensor', full_name='Measurement.sensor', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='type', full_name='Measurement.type', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='quantity', full_name='Measurement.quantity', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='time', full_name='Measurement.time', index=3,
      number=4, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=85,
  serialized_end=184,
)


_SENSORRESPONSE = _descriptor.Descriptor(
  name='SensorResponse',
  full_name='SensorResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='success', full_name='SensorResponse.success', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='error', full_name='SensorResponse.error', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='message', full_name='SensorResponse.message', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='data', full_name='SensorResponse.data', index=3,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=186,
  serialized_end=279,
)

_QUANTITY.fields_by_name['unit'].enum_type = _UNIT
_MEASUREMENT.fields_by_name['type'].enum_type = _SENSORTYPE
_MEASUREMENT.fields_by_name['quantity'].message_type = _QUANTITY
_SENSORRESPONSE.fields_by_name['data'].message_type = _MEASUREMENT
DESCRIPTOR.message_types_by_name['Quantity'] = _QUANTITY
DESCRIPTOR.message_types_by_name['Measurement'] = _MEASUREMENT
DESCRIPTOR.message_types_by_name['SensorResponse'] = _SENSORRESPONSE
DESCRIPTOR.enum_types_by_name['SensorType'] = _SENSORTYPE
DESCRIPTOR.enum_types_by_name['Unit'] = _UNIT
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Quantity = _reflection.GeneratedProtocolMessageType('Quantity', (_message.Message,), dict(
  DESCRIPTOR = _QUANTITY,
  __module__ = 'sensor_data_pb2'
  # @@protoc_insertion_point(class_scope:Quantity)
  ))
_sym_db.RegisterMessage(Quantity)

Measurement = _reflection.GeneratedProtocolMessageType('Measurement', (_message.Message,), dict(
  DESCRIPTOR = _MEASUREMENT,
  __module__ = 'sensor_data_pb2'
  # @@protoc_insertion_point(class_scope:Measurement)
  ))
_sym_db.RegisterMessage(Measurement)

SensorResponse = _reflection.GeneratedProtocolMessageType('SensorResponse', (_message.Message,), dict(
  DESCRIPTOR = _SENSORRESPONSE,
  __module__ = 'sensor_data_pb2'
  # @@protoc_insertion_point(class_scope:SensorResponse)
  ))
_sym_db.RegisterMessage(SensorResponse)


# @@protoc_insertion_point(module_scope)
